#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

int getIntegerInput(const char *prompt) {
    char buffer[100];
    int key;

    while (1) {
        printf("%s", prompt);
        if (!fgets(buffer, sizeof(buffer), stdin)) {
            printf("Error reading input.\n");
            continue;
        }

        if (sscanf(buffer, "%d", &key) == 1 && key > 1)
            return key;

        printf("Please enter a valid integer greater than 1.\n");
    }
}

void encryptRailFence(char *text, int key, char *cipher) {
    int len = strlen(text);
    char rail[key][len];

    for (int i = 0; i < key; i++)
        for (int j = 0; j < len; j++)
            rail[i][j] = '\n';

    int row = 0, down = 1;
    for (int i = 0; i < len; i++) {
        rail[row][i] = text[i];
        if (row == 0)
            down = 1;
        else if (row == key - 1)
            down = 0;
        row += down ? 1 : -1;
    }

    int idx = 0;
    for (int i = 0; i < key; i++)
        for (int j = 0; j < len; j++)
            if (rail[i][j] != '\n')
                cipher[idx++] = rail[i][j];
    cipher[idx] = '\0';
}

void decryptRailFence(char *cipher, int key, char *plain) {
    int len = strlen(cipher);
    char rail[key][len];

    for (int i = 0; i < key; i++)
        for (int j = 0; j < len; j++)
            rail[i][j] = '\n';

    int row = 0, down = 1;
    for (int i = 0; i < len; i++) {
        rail[row][i] = '*';
        if (row == 0)
            down = 1;
        else if (row == key - 1)
            down = 0;
        row += down ? 1 : -1;
    }

    int idx = 0;
    for (int i = 0; i < key; i++)
        for (int j = 0; j < len; j++)
            if (rail[i][j] == '*')
                rail[i][j] = cipher[idx++];

    row = 0, down = 1;
    for (int i = 0; i < len; i++) {
        plain[i] = rail[row][i];
        if (row == 0)
            down = 1;
        else if (row == key - 1)
            down = 0;
        row += down ? 1 : -1;
    }
    plain[len] = '\0';
}

int main() {
    char text[1000], encrypted[1000], decrypted[1000];

    printf("Rail Fence Transposition Cipher\n");
    printf("Enter the message: ");
    fgets(text, sizeof(text), stdin);

    size_t len = strlen(text);
    if (text[len - 1] == '\n') text[len - 1] = '\0';

    int key = getIntegerInput("Enter the number of rails (key): ");

    encryptRailFence(text, key, encrypted);
    decryptRailFence(encrypted, key, decrypted);

    printf("Encrypted message: %s\n", encrypted);
    printf("Decrypted message: %s\n", decrypted);

    return 0;
}
