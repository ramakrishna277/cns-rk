#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define ALPHABET_LEN 26

void generate_cipher_alphabet(char *keyword, char cipher_alphabet[ALPHABET_LEN]) {
    int used[26] = {0};
    int index = 0;
    for (int i = 0; keyword[i] != '\0'; i++) {
        char ch = toupper(keyword[i]);
        if (isalpha(ch) && !used[ch - 'A']) {
            cipher_alphabet[index++] = ch;
            used[ch - 'A'] = 1;
        }
    }

    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (!used[ch - 'A']) {
            cipher_alphabet[index++] = ch;
        }
    }
}

char encrypt_char(char ch, char cipher_alphabet[ALPHABET_LEN]) {
    if (isalpha(ch)) {
        int index = tolower(ch) - 'a';
        return islower(ch) ? tolower(cipher_alphabet[index]) : cipher_alphabet[index];
    }
    return ch;
}

void encrypt(char *plaintext, char *keyword) {
    char cipher_alphabet[ALPHABET_LEN];
    generate_cipher_alphabet(keyword, cipher_alphabet);

    printf("Plaintext:  %s\n", plaintext);
    printf("Ciphertext: ");

    for (int i = 0; plaintext[i] != '\0'; i++) {
        printf("%c", encrypt_char(plaintext[i], cipher_alphabet));
    }
    printf("\n");
}

int main() {
    char keyword[] = "CIPHER";
    char plaintext[1024];

    printf("Enter the plaintext to encrypt: ");
    fgets(plaintext, sizeof(plaintext), stdin);
    plaintext[strcspn(plaintext, "\n")] = '\0';

    encrypt(plaintext, keyword);

return 0;
}
